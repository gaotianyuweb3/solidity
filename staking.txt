// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract MetaNodeStaking is 
    Initializable,
    AccessControlUpgradeable,
    PausableUpgradeable,
    UUPSUpgradeable
{
    using SafeERC20Upgradeable for IERC20Upgradeable;

    // 角色定义
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    
    // 质押池结构
    struct Pool {
        address stTokenAddress;       // 质押代币地址
        uint256 poolWeight;           // 奖励分配权重
        uint256 lastRewardBlock;      // 最后奖励计算区块
        uint256 accMetaNodePerST;     // 每质押代币累计奖励
        uint256 stTokenAmount;        // 总质押量
        uint256 minDepositAmount;    // 最小质押金额
        uint256 unstakeLockedBlocks;  // 解质押锁定区块数
    }
    
    // 用户信息结构
    struct User {
        uint256 stAmount;             // 质押数量
        uint256 finishedMetaNode;     // 已领取奖励
        uint256 pendingMetaNode;      // 待领取奖励
        UnlockRequest[] requests;     // 解质押请求
    }
    
    // 解质押请求结构
    struct UnlockRequest {
        uint256 amount;               // 解质押数量
        uint256 unlockBlock;          // 可解锁区块
    }
    
    // 状态变量
    IERC20Upgradeable public rewardToken; // MetaNode代币
    Pool[] public pools;              // 质押池列表
    uint256 public totalWeight;       // 总权重
    uint256 public rewardPerBlock;    // 区块奖励
    
    // 用户映射 (poolId => userAddress => User)
    mapping(uint256 => mapping(address => User)) public users;
    
    // 暂停状态
    bool public stakePaused;
    bool public unstakePaused;
    bool public claimPaused;
    
    // 事件定义
    event PoolAdded(uint256 indexed pid, address stToken, uint256 weight, uint256 minDeposit, uint256 lockedBlocks);
    event PoolUpdated(uint256 indexed pid, uint256 weight, uint256 minDeposit, uint256 lockedBlocks);
    event Staked(address indexed user, uint256 indexed pid, uint256 amount);
    event UnstakeRequested(address indexed user, uint256 indexed pid, uint256 amount, uint256 unlockBlock);
    event Unstaked(address indexed user, uint256 indexed pid, uint256 amount);
    event RewardClaimed(address indexed user, uint256 indexed pid, uint256 amount);
    event RewardPerBlockSet(uint256 amount);
    event EmergencyWithdrawn(address indexed user, uint256 indexed pid, uint256 amount);
    
    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() initializer {}
    
    function initialize(
        address _rewardToken,
        address _admin
    ) public initializer {
        __AccessControl_init();
        __Pausable_init();
        __UUPSUpgradeable_init();
        
        rewardToken = IERC20Upgradeable(_rewardToken);
        _setupRole(ADMIN_ROLE, _admin);
        _setupRole(UPGRADER_ROLE, _admin);
        _setRoleAdmin(UPGRADER_ROLE, ADMIN_ROLE);
    }
    
    // 添加新质押池（仅管理员）
    function addPool(
        address _stTokenAddress,
        uint256 _poolWeight,
        uint256 _minDepositAmount,
        uint256 _unstakeLockedBlocks
    ) external onlyRole(ADMIN_ROLE) {
        require(_stTokenAddress != address(0), "Invalid token address");
        require(_poolWeight > 0, "Weight must be positive");
        
        pools.push(Pool({
            stTokenAddress: _stTokenAddress,
            poolWeight: _poolWeight,
            lastRewardBlock: block.number,
            accMetaNodePerST: 0,
            stTokenAmount: 0,
            minDepositAmount: _minDepositAmount,
            unstakeLockedBlocks: _unstakeLockedBlocks
        }));
        
        totalWeight += _poolWeight;
        emit PoolAdded(pools.length - 1, _stTokenAddress, _poolWeight, _minDepositAmount, _unstakeLockedBlocks);
    }
    
    // 更新质押池配置（仅管理员）
    function updatePool(
        uint256 _pid,
        uint256 _poolWeight,
        uint256 _minDepositAmount,
        uint256 _unstakeLockedBlocks
    ) external onlyRole(ADMIN_ROLE) {
        require(_pid < pools.length, "Invalid pool ID");
        updatePoolRewards(_pid);
        
        Pool storage pool = pools[_pid];
        totalWeight = totalWeight - pool.poolWeight + _poolWeight;
        
        pool.poolWeight = _poolWeight;
        pool.minDepositAmount = _minDepositAmount;
        pool.unstakeLockedBlocks = _unstakeLockedBlocks;
        
        emit PoolUpdated(_pid, _poolWeight, _minDepositAmount, _unstakeLockedBlocks);
    }
    
    // 设置每区块奖励（仅管理员）
    function setRewardPerBlock(uint256 _amount) external onlyRole(ADMIN_ROLE) {
        for (uint256 pid = 0; pid < pools.length; pid++) {
            updatePoolRewards(pid);
        }
        rewardPerBlock = _amount;
        emit RewardPerBlockSet(_amount);
    }
    
    // 质押代币
    function stake(uint256 _pid, uint256 _amount) external payable whenNotPaused {
        require(!stakePaused, "Staking paused");
        require(_pid < pools.length, "Invalid pool ID");
        require(_amount >= pools[_pid].minDepositAmount, "Below minimum deposit");
        
        updatePoolRewards(_pid);
        updateUserReward(_pid, msg.sender);
        
        Pool storage pool = pools[_pid];
        User storage user = users[_pid][msg.sender];
        
        // 处理质押代币（ETH或ERC20）
        if (pool.stTokenAddress == address(0)) {
            require(msg.value == _amount, "ETH amount mismatch");
        } else {
            IERC20Upgradeable(pool.stTokenAddress).safeTransferFrom(
                msg.sender,
                address(this),
                _amount
            );
        }
        
        pool.stTokenAmount += _amount;
        user.stAmount += _amount;
        
        emit Staked(msg.sender, _pid, _amount);
    }
    
    // 请求解质押
    function requestUnstake(uint256 _pid, uint256 _amount) external whenNotPaused {
        require(!unstakePaused, "Unstaking paused");
        require(_pid < pools.length, "Invalid pool ID");
        require(_amount > 0, "Invalid amount");
        
        updatePoolRewards(_pid);
        updateUserReward(_pid, msg.sender);
        
        User storage user = users[_pid][msg.sender];
        require(user.stAmount >= _amount, "Insufficient balance");
        
        Pool storage pool = pools[_pid];
        user.stAmount -= _amount;
        pool.stTokenAmount -= _amount;
        
        // 添加解质押请求
        user.requests.push(UnlockRequest({
            amount: _amount,
            unlockBlock: block.number + pool.unstakeLockedBlocks
        }));
        
        emit UnstakeRequested(msg.sender, _pid, _amount, block.number + pool.unstakeLockedBlocks);
    }
    
    // 完成解质押（当锁定期结束后）
    function completeUnstake(uint256 _pid, uint256 _requestId) external {
        require(_pid < pools.length, "Invalid pool ID");
        
        User storage user = users[_pid][msg.sender];
        require(_requestId < user.requests.length, "Invalid request ID");
        
        UnlockRequest storage request = user.requests[_requestId];
        require(block.number >= request.unlockBlock, "Lock period not ended");
        
        uint256 amount = request.amount;
        
        // 移除请求
        user.requests[_requestId] = user.requests[user.requests.length - 1];
        user.requests.pop();
        
        // 转移代币
        Pool storage pool = pools[_pid];
        if (pool.stTokenAddress == address(0)) {
            (bool success, ) = msg.sender.call{value: amount}("");
            require(success, "ETH transfer failed");
        } else {
            IERC20Upgradeable(pool.stTokenAddress).safeTransfer(msg.sender, amount);
        }
        
        emit Unstaked(msg.sender, _pid, amount);
    }
    
    // 领取奖励
    function claimReward(uint256 _pid) external whenNotPaused {
        require(!claimPaused, "Claiming paused");
        require(_pid < pools.length, "Invalid pool ID");
        
        updatePoolRewards(_pid);
        updateUserReward(_pid, msg.sender);
        
        User storage user = users[_pid][msg.sender];
        uint256 pending = user.pendingMetaNode;
        
        require(pending > 0, "No rewards to claim");
        
        user.pendingMetaNode = 0;
        user.finishedMetaNode += pending;
        
        rewardToken.safeTransfer(msg.sender, pending);
        emit RewardClaimed(msg.sender, _pid, pending);
    }
    
    // 更新池奖励累积
    function updatePoolRewards(uint256 _pid) internal {
        require(_pid < pools.length, "Invalid pool ID");
        Pool storage pool = pools[_pid];
        
        if (block.number <= pool.lastRewardBlock || pool.stTokenAmount == 0) {
            return;
        }
        
        uint256 blocksPassed = block.number - pool.lastRewardBlock;
        uint256 metaNodeReward = (blocksPassed * rewardPerBlock * pool.poolWeight) / totalWeight;
        
        pool.accMetaNodePerST += (metaNodeReward * 1e18) / pool.stTokenAmount;
        pool.lastRewardBlock = block.number;
    }
    
    // 更新用户奖励
    function updateUserReward(uint256 _pid, address _user) internal {
        Pool storage pool = pools[_pid];
        User storage user = users[_pid][_user];
        
        if (user.stAmount > 0) {
            uint256 pending = (user.stAmount * pool.accMetaNodePerST) / 1e18 - user.finishedMetaNode;
            if (pending > 0) {
                user.pendingMetaNode += pending;
            }
        }
        user.finishedMetaNode = (user.stAmount * pool.accMetaNodePerST) / 1e18;
    }
    
    // 紧急提款（跳过锁定期）
    function emergencyWithdraw(uint256 _pid) external {
        require(_pid < pools.length, "Invalid pool ID");
        
        User storage user = users[_pid][msg.sender];
        Pool storage pool = pools[_pid];
        
        uint256 amount = user.stAmount;
        require(amount > 0, "Nothing to withdraw");
        
        // 重置用户状态
        user.stAmount = 0;
        user.finishedMetaNode = 0;
        user.pendingMetaNode = 0;
        delete user.requests;
        
        // 更新池状态
        pool.stTokenAmount -= amount;
        
        // 转移代币
        if (pool.stTokenAddress == address(0)) {
            (bool success, ) = msg.sender.call{value: amount}("");
            require(success, "ETH transfer failed");
        } else {
            IERC20Upgradeable(pool.stTokenAddress).safeTransfer(msg.sender, amount);
        }
        
        emit EmergencyWithdrawn(msg.sender, _pid, amount);
    }
    
    // 管理暂停状态
    function setPausedStates(
        bool _stakePaused,
        bool _unstakePaused,
        bool _claimPaused
    ) external onlyRole(ADMIN_ROLE) {
        stakePaused = _stakePaused;
        unstakePaused = _unstakePaused;
        claimPaused = _claimPaused;
    }
    
    // 获取用户解质押请求
    function getUserRequests(uint256 _pid, address _user) 
        external 
        view 
        returns (UnlockRequest[] memory) 
    {
        return users[_pid][_user].requests;
    }
    
    // 获取用户待领奖励
    function pendingReward(uint256 _pid, address _user) 
        external 
        view 
        returns (uint256) 
    {
        require(_pid < pools.length, "Invalid pool ID");
        Pool storage pool = pools[_pid];
        User storage user = users[_pid][_user];
        
        uint256 accMetaNodePerST = pool.accMetaNodePerST;
        uint256 stTokenSupply = pool.stTokenAmount;
        
        if (block.number > pool.lastRewardBlock && stTokenSupply != 0) {
            uint256 blocksPassed = block.number - pool.lastRewardBlock;
            uint256 metaNodeReward = (blocksPassed * rewardPerBlock * pool.poolWeight) / totalWeight;
            accMetaNodePerST += (metaNodeReward * 1e18) / stTokenSupply;
        }
        
        return user.pendingMetaNode + 
            ((user.stAmount * accMetaNodePerST) / 1e18 - user.finishedMetaNode);
    }
    
    // 提取误转的代币（仅管理员）
    function rescueTokens(
        address _token,
        address _to,
        uint256 _amount
    ) external onlyRole(ADMIN_ROLE) {
        IERC20Upgradeable(_token).safeTransfer(_to, _amount);
    }
    
    // 提取误转的ETH（仅管理员）
    function rescueETH(address payable _to) external onlyRole(ADMIN_ROLE) {
        _to.transfer(address(this).balance);
    }
    
    // 支持接收ETH
    receive() external payable {}
    
    // UUPS升级授权
    function _authorizeUpgrade(address) internal override onlyRole(UPGRADER_ROLE) {}
}